(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),i=t.n(o),r=t(645),a=t.n(r)()(i());a.push([n.id,"* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\nbody {\n    width: 100%;\n    height: 100%;\n}\n\nheader {\n    display: flex;\n    width: 100%;\n    height: 10vh;\n    background-color: rgba(0, 0, 0, 0.856);\n    align-items: center;\n    padding: 30px;\n    font-size: 3rem;\n    color: white;\n    box-shadow: 0 4px 15px 4px rgb(90 77 77);\n}\n\n.content {\n    display: flex;\n    min-height: 90vh;\n    height: 100%;\n    width: 100%;\n}\n\n/* LEFT SIDE CONTENT */\n\n.left-side-div {\n    display: flex;\n    flex-direction: column;\n    width: 25%;\n    /* height: 100vh; */\n    background-color: rgba(0, 0, 0, 0.856);\n    padding: 10px;\n    \n}\n\n.left-side-div input {\n    font-size: 2rem;\n    width: 90%;\n    padding: 5px;\n    margin: 2%;\n}\n\n.left-side-div button {\n    padding: 14px 14px;\n    width: 40%;\n    margin: 2%;\n    border-radius: 6px;\n    background-color: rgb(0, 140, 255);\n    border-style: none;\n    color: white;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n}\n\n.left-side-div li {\n    border: 2px solid rgb(62, 193, 233);\n    color: rgb(53, 4, 0);\n    margin: 2%;\n    padding: 5px;\n    font-size: 1.5rem;\n    font-weight: 600;\n    cursor: pointer;\n    color: white;\n    list-style-type: none;\n    position: relative;\n}\n\n/* RIGHT SIDE CONTENT */\n\n#todo-container {\n    /* display: grid; */\n    width: 75%;\n    /* height: 100%; */\n    background-color:rgba(0, 0, 0, 0.795);\n    display: flex;\n    flex-direction: column;\n    gap: 40px;\n\n    padding: 50px;\n    color: white;\n}\n\n#default-header {\n    text-align: center;\n    font-size: 5rem;\n}\n\n#project-title-div {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 50px;\n}\n\n#project-title-div h2 {\n    font-size: 3rem;\n}\n\n#project-header{\n    font-size: 4rem;\n}\n\n#choose-time-div {\n    display: flex;\n    gap: 20px;\n    justify-content: flex-end;\n    align-items: center;\n}\n\n#choose-time-div input {\n    font-size: 1.5rem;\n}\n\n#choose-time-div label {\n    font-size: 1.5rem;\n    font-weight: 600;\n}\n\n#todo-button-container {\n    display: flex;\n    gap: 20px;\n    justify-content: flex-end;\n}\n\n.todo-div {\n    display: flex;\n    justify-content: space-between;\n    border: solid 1px white;\n    padding: 10px;\n    font-size: 1.5rem;\n    box-shadow: 2px 5px 10px 0px grey;\n    z-index: 2;\n    cursor: pointer;\n    position: relative;\n    height: 80px;\n}\n\n.todo-div p {\n    z-index: 0;\n    height: 30px;\n}\n\n#no-delete {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    height: 30px;\n    pointer-events: none;\n    font-weight: 600;\n    font-size: 2rem;\n    border-bottom: 2px solid #80808087;\n    padding-bottom: 36px;\n    position: relative;\n    top: 20px;\n}\n\n\n.open-todo {\n    display: flex;\n    min-width: 200px;\n    height: 200px;\n    flex-direction: column;\n    justify-content: flex-start;\n}\n\n\n#extended-div {\n    display: flex;\n    z-index: 1;\n    justify-content: space-between;\n    height: 100%;\n    pointer-events: none;\n    position: relative;\n    top: 20px;\n}\n\n\n.todo-button {\n    padding: 14px 14px;\n    /* width: 40%; */\n    /* margin: 2%; */\n    border-radius: 6px;\n    background-color: rgb(0, 140, 255);\n    border-style: none;\n    color: white;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n}\n\n\n/* MODAL */\n\n.bg-modal {\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.7);\n    position: absolute;\n    top: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 10;\n    /* display: none; */\n}\n\n.modal-content {\n    width: 500px;\n    height: 450px;\n    font-size: 2rem;\n    background-color: white;\n    border-radius: 4px;\n    text-align: center;\n    padding: 20px;\n    gap: 20px;\n    position: relative;\n\n\n\n}\n\n.modal-content img {\n    border-radius: 50%;\n}\n\n.modal-content form {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    z-index: 3;\n}\n\n.modal-content button {\n    padding: 8px 16px;\n\n    align-self: center;\n    background-color: rgb(65, 147, 255);\n    color: white;\n    border-radius: 24px;\n    font-size: 1.5rem;\n    justify-self: flex-end;\n    /* margin-right: 5%; */\n}\n\n.modal-content input {\n    width: 70%;\n    display: block;\n    margin: 5px auto;\n    font-size: 1.4rem;\n}\n\n.modal-content textarea{\n    align-self: center;\n    width: 70%;\n}\n\n.close {\n    position: absolute;\n    top: 0;\n    right: 14px;\n    font-size: 42px;\n    transform: rotate(45deg);\n    cursor: pointer;\n}\n\n#task-close {\n    /* position: absolute; */\n    top: -10px;\n    right: 3px;\n}\n\n#project-close {\n    top: -5px;\n    right: 5px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\nbody {\n    width: 100%;\n    height: 100%;\n}\n\nheader {\n    display: flex;\n    width: 100%;\n    height: 10vh;\n    background-color: rgba(0, 0, 0, 0.856);\n    align-items: center;\n    padding: 30px;\n    font-size: 3rem;\n    color: white;\n    box-shadow: 0 4px 15px 4px rgb(90 77 77);\n}\n\n.content {\n    display: flex;\n    min-height: 90vh;\n    height: 100%;\n    width: 100%;\n}\n\n/* LEFT SIDE CONTENT */\n\n.left-side-div {\n    display: flex;\n    flex-direction: column;\n    width: 25%;\n    /* height: 100vh; */\n    background-color: rgba(0, 0, 0, 0.856);\n    padding: 10px;\n    \n}\n\n.left-side-div input {\n    font-size: 2rem;\n    width: 90%;\n    padding: 5px;\n    margin: 2%;\n}\n\n.left-side-div button {\n    padding: 14px 14px;\n    width: 40%;\n    margin: 2%;\n    border-radius: 6px;\n    background-color: rgb(0, 140, 255);\n    border-style: none;\n    color: white;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n}\n\n.left-side-div li {\n    border: 2px solid rgb(62, 193, 233);\n    color: rgb(53, 4, 0);\n    margin: 2%;\n    padding: 5px;\n    font-size: 1.5rem;\n    font-weight: 600;\n    cursor: pointer;\n    color: white;\n    list-style-type: none;\n    position: relative;\n}\n\n/* RIGHT SIDE CONTENT */\n\n#todo-container {\n    /* display: grid; */\n    width: 75%;\n    /* height: 100%; */\n    background-color:rgba(0, 0, 0, 0.795);\n    display: flex;\n    flex-direction: column;\n    gap: 40px;\n\n    padding: 50px;\n    color: white;\n}\n\n#default-header {\n    text-align: center;\n    font-size: 5rem;\n}\n\n#project-title-div {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 50px;\n}\n\n#project-title-div h2 {\n    font-size: 3rem;\n}\n\n#project-header{\n    font-size: 4rem;\n}\n\n#choose-time-div {\n    display: flex;\n    gap: 20px;\n    justify-content: flex-end;\n    align-items: center;\n}\n\n#choose-time-div input {\n    font-size: 1.5rem;\n}\n\n#choose-time-div label {\n    font-size: 1.5rem;\n    font-weight: 600;\n}\n\n#todo-button-container {\n    display: flex;\n    gap: 20px;\n    justify-content: flex-end;\n}\n\n.todo-div {\n    display: flex;\n    justify-content: space-between;\n    border: solid 1px white;\n    padding: 10px;\n    font-size: 1.5rem;\n    box-shadow: 2px 5px 10px 0px grey;\n    z-index: 2;\n    cursor: pointer;\n    position: relative;\n    height: 80px;\n}\n\n.todo-div p {\n    z-index: 0;\n    height: 30px;\n}\n\n#no-delete {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    height: 30px;\n    pointer-events: none;\n    font-weight: 600;\n    font-size: 2rem;\n    border-bottom: 2px solid #80808087;\n    padding-bottom: 36px;\n    position: relative;\n    top: 20px;\n}\n\n\n.open-todo {\n    display: flex;\n    min-width: 200px;\n    height: 200px;\n    flex-direction: column;\n    justify-content: flex-start;\n}\n\n\n#extended-div {\n    display: flex;\n    z-index: 1;\n    justify-content: space-between;\n    height: 100%;\n    pointer-events: none;\n    position: relative;\n    top: 20px;\n}\n\n\n.todo-button {\n    padding: 14px 14px;\n    /* width: 40%; */\n    /* margin: 2%; */\n    border-radius: 6px;\n    background-color: rgb(0, 140, 255);\n    border-style: none;\n    color: white;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n}\n\n\n/* MODAL */\n\n.bg-modal {\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.7);\n    position: absolute;\n    top: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 10;\n    /* display: none; */\n}\n\n.modal-content {\n    width: 500px;\n    height: 450px;\n    font-size: 2rem;\n    background-color: white;\n    border-radius: 4px;\n    text-align: center;\n    padding: 20px;\n    gap: 20px;\n    position: relative;\n\n\n\n}\n\n.modal-content img {\n    border-radius: 50%;\n}\n\n.modal-content form {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    z-index: 3;\n}\n\n.modal-content button {\n    padding: 8px 16px;\n\n    align-self: center;\n    background-color: rgb(65, 147, 255);\n    color: white;\n    border-radius: 24px;\n    font-size: 1.5rem;\n    justify-self: flex-end;\n    /* margin-right: 5%; */\n}\n\n.modal-content input {\n    width: 70%;\n    display: block;\n    margin: 5px auto;\n    font-size: 1.4rem;\n}\n\n.modal-content textarea{\n    align-self: center;\n    width: 70%;\n}\n\n.close {\n    position: absolute;\n    top: 0;\n    right: 14px;\n    font-size: 42px;\n    transform: rotate(45deg);\n    cursor: pointer;\n}\n\n#task-close {\n    /* position: absolute; */\n    top: -10px;\n    right: 3px;\n}\n\n#project-close {\n    top: -5px;\n    right: 5px;\n}"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);o&&a[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},a=[],s=0;s<n.length;s++){var d=n[s],l=o.base?d[0]+o.base:d[0],c=r[l]||0,A="".concat(l," ").concat(c);r[l]=c+1;var u=t(A),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=i(p,o);o.byIndex=s,e.splice(s,0,{identifier:A,updater:m,references:1})}a.push(A)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=o(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<r.length;a++){var s=t(r[a]);e[s].references--}for(var d=o(n,i),l=0;l<r.length;l++){var c=t(r[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}r=d}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={id:o,exports:{}};return n[o](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),o=t(795),i=t.n(o),r=t(569),a=t.n(r),s=t(565),d=t.n(s),l=t(216),c=t.n(l),A=t(589),u=t.n(A),p=t(426),m={};m.styleTagTransform=u(),m.setAttributes=d(),m.insert=a().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=c(),e()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;function h(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function f(n){h(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function g(n,e){h(2,arguments);var t=f(n),o=f(e),i=t.getTime()-o.getTime();return i<0?-1:i>0?1:i}function C(n,e){h(2,arguments);var t=f(n),o=f(e),i=t.getFullYear()-o.getFullYear(),r=t.getMonth()-o.getMonth();return 12*i+r}function v(n){h(1,arguments);var e=f(n);return e.setHours(23,59,59,999),e}function b(n){h(1,arguments);var e=f(n),t=e.getMonth();return e.setFullYear(e.getFullYear(),t+1,0),e.setHours(23,59,59,999),e}function B(n){h(1,arguments);var e=f(n);return v(e).getTime()===b(e).getTime()}function I(n,e){h(2,arguments);var t,o=f(n),i=f(e),r=g(o,i),a=Math.abs(C(o,i));if(a<1)t=0;else{1===o.getMonth()&&o.getDate()>27&&o.setDate(30),o.setMonth(o.getMonth()-r*a);var s=g(o,i)===-r;B(f(n))&&1===a&&1===g(n,i)&&(s=!1),t=r*(a-Number(s))}return 0===t?0:t}function y(n,e){return h(2,arguments),f(n).getTime()-f(e).getTime()}var x={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(n){return n<0?Math.ceil(n):Math.floor(n)}};function w(n){return n?x[n]:x.trunc}function k(n,e,t){h(2,arguments);var o=y(n,e)/1e3;return w(null==t?void 0:t.roundingMethod)(o)}var E={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function T(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,o=n.formats[t]||n.formats[n.defaultWidth];return o}}const M={date:T({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:T({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:T({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var D={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function S(n){return function(e,t){var o,i=t||{};if("formatting"===(i.context?String(i.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,a=i.width?String(i.width):r;o=n.formattingValues[a]||n.formattingValues[r]}else{var s=n.defaultWidth,d=i.width?String(i.width):n.defaultWidth;o=n.values[d]||n.values[s]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const j={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:S({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:S({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:S({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:S({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:S({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function N(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,i=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],r=e.match(i);if(!r)return null;var a,s=r[0],d=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(d)?U(d,(function(n){return n.test(s)})):z(d,(function(n){return n.test(s)}));a=n.valueCallback?n.valueCallback(l):l,a=t.valueCallback?t.valueCallback(a):a;var c=e.slice(s.length);return{value:a,rest:c}}}function z(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function U(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var L,Y={ordinalNumber:(L={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(L.matchPattern);if(!t)return null;var o=t[0],i=n.match(L.parsePattern);if(!i)return null;var r=L.valueCallback?L.valueCallback(i[0]):i[0];r=e.valueCallback?e.valueCallback(r):r;var a=n.slice(o.length);return{value:r,rest:a}}),era:N({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:N({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:N({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:N({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:N({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const W={code:"en-US",formatDistance:function(n,e,t){var o,i=E[n];return o="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:M,formatRelative:function(n,e,t,o){return D[n]},localize:j,match:Y,options:{weekStartsOn:0,firstWeekContainsDate:1}};function P(n){return function(n,e){if(null==n)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in e=e||{})Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n}({},n)}function H(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var q=1440,F=43200;function X(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};h(2,arguments);var o=t.locale||W;if(!o.formatDistance)throw new RangeError("locale must contain formatDistance property");var i=g(n,e);if(isNaN(i))throw new RangeError("Invalid time value");var r,a,s=P(t);s.addSuffix=Boolean(t.addSuffix),s.comparison=i,i>0?(r=f(e),a=f(n)):(r=f(n),a=f(e));var d,l=k(a,r),c=(H(a)-H(r))/1e3,A=Math.round((l-c)/60);if(A<2)return t.includeSeconds?l<5?o.formatDistance("lessThanXSeconds",5,s):l<10?o.formatDistance("lessThanXSeconds",10,s):l<20?o.formatDistance("lessThanXSeconds",20,s):l<40?o.formatDistance("halfAMinute",null,s):l<60?o.formatDistance("lessThanXMinutes",1,s):o.formatDistance("xMinutes",1,s):0===A?o.formatDistance("lessThanXMinutes",1,s):o.formatDistance("xMinutes",A,s);if(A<45)return o.formatDistance("xMinutes",A,s);if(A<90)return o.formatDistance("aboutXHours",1,s);if(A<q){var u=Math.round(A/60);return o.formatDistance("aboutXHours",u,s)}if(A<2520)return o.formatDistance("xDays",1,s);if(A<F){var p=Math.round(A/q);return o.formatDistance("xDays",p,s)}if(A<86400)return d=Math.round(A/F),o.formatDistance("aboutXMonths",d,s);if((d=I(a,r))<12){var m=Math.round(A/F);return o.formatDistance("xMonths",m,s)}var C=d%12,v=Math.floor(d/12);return C<3?o.formatDistance("aboutXYears",v,s):C<9?o.formatDistance("overXYears",v,s):o.formatDistance("almostXYears",v+1,s)}Math.pow(10,8);var Z=36e5;function O(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var V={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},R=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,J=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,G=/^([+-])(\d{2})(?::?(\d{2}))?$/;function $(n){var e,t={},o=n.split(V.dateTimeDelimiter);if(o.length>2)return t;if(/:/.test(o[0])?e=o[0]:(t.date=o[0],e=o[1],V.timeZoneDelimiter.test(t.date)&&(t.date=n.split(V.timeZoneDelimiter)[0],e=n.substr(t.date.length,n.length))),e){var i=V.timezone.exec(e);i?(t.time=e.replace(i[1],""),t.timezone=i[1]):t.time=e}return t}function Q(n,e){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),o=n.match(t);if(!o)return{year:NaN,restDateString:""};var i=o[1]?parseInt(o[1]):null,r=o[2]?parseInt(o[2]):null;return{year:null===r?i:100*r,restDateString:n.slice((o[1]||o[2]).length)}}function _(n,e){if(null===e)return new Date(NaN);var t=n.match(R);if(!t)return new Date(NaN);var o=!!t[4],i=K(t[1]),r=K(t[2])-1,a=K(t[3]),s=K(t[4]),d=K(t[5])-1;if(o)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,s,d)?function(n,e,t){var o=new Date(0);o.setUTCFullYear(n,0,4);var i=7*(e-1)+t+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+i),o}(e,s,d):new Date(NaN);var l=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(on[e]||(rn(n)?29:28))}(e,r,a)&&function(n,e){return e>=1&&e<=(rn(n)?366:365)}(e,i)?(l.setUTCFullYear(e,r,Math.max(i,a)),l):new Date(NaN)}function K(n){return n?parseInt(n):1}function nn(n){var e=n.match(J);if(!e)return NaN;var t=en(e[1]),o=en(e[2]),i=en(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,o,i)?t*Z+6e4*o+1e3*i:NaN}function en(n){return n&&parseFloat(n.replace(",","."))||0}function tn(n){if("Z"===n)return 0;var e=n.match(G);if(!e)return 0;var t="+"===e[1]?-1:1,o=parseInt(e[2]),i=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,i)?t*(o*Z+6e4*i):NaN}var on=[31,null,31,30,31,30,31,31,30,31,30,31];function rn(n){return n%400==0||n%4==0&&n%100!=0}const an=function(){document.querySelector("#todo-container").innerHTML=""},sn=function(n){const e=document.getElementById("todo-container");!function(){const e=document.createElement("div");e.id="project-title-div";const t=document.createElement("h1");t.id="project-header",t.innerHTML=n.getTitle(),e.appendChild(t),a(e)}(),function(){const n=document.createElement("div"),e=document.createElement("label");e.innerHTML="Pick a date for your project?";const t=document.createElement("input");t.type="date",n.id="choose-time-div",n.appendChild(e),n.appendChild(t),a(n)}(),function(){const e=n.get();if(e.length>0)for(let n of e)i(n)}(),function(){const n=document.createElement("div"),e=document.createElement("button");e.innerHTML="Add task",n.id="todo-button-container",e.classList.add("todo-button"),n.appendChild(e),a(n)}(),r();const t=e.querySelectorAll(".todo-button")[0],o=e.querySelector("input");function i(e){const t=document.createElement("div"),o=document.createElement("div"),i=document.createElement("p"),r=document.createElement("p"),s=document.createElement("div");i.innerHTML=e.getTitle(),r.innerHTML=e.getDate(),s.innerHTML="+",o.id="no-delete",s.classList.add("close"),s.id="task-close",o.appendChild(i),o.appendChild(r),t.appendChild(s),t.appendChild(o),t.classList.add("todo-div"),t.addEventListener("click",(n=>{!function(n,e){const t=n.target;if("DIV"===t.nodeName&&t.classList.contains("todo-div")){t.classList.toggle("open-todo");const n=document.createElement("div");if(t.classList.contains("open-todo")){n.id="extended-div";const o=document.createElement("p");o.innerHTML=e.getDesc(),n.appendChild(o),t.appendChild(n),n.addEventListener("click",(()=>{}))}else for(let n of t.childNodes)"DIV"===n.nodeName&&"no-delete"!=n.id&&"task-close"!=n.id&&n.remove()}}(n,e)})),s.addEventListener("click",(e=>{!function(n,e){const t=e.get(),o=n.target.parentElement.childNodes[1].childNodes[0].innerHTML;for(let n=0;n<t.length;n++)t[n].getTitle()===o&&(console.log(e.get()),t.splice(n,1),console.log(e.get()));an(),sn(e)}(e,n)})),a(t)}function r(){if(0!=n.getCompletionDate()){const t=e.querySelector("#project-title-div"),o=t.querySelector("h2");null!=o&&o.remove();const i=function(n,e){return h(1,arguments),X(n,Date.now(),e)}(function(n,e){h(1,arguments);var t=e||{},o=null==t.additionalDigits?2:O(t.additionalDigits);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof n&&"[object String]"!==Object.prototype.toString.call(n))return new Date(NaN);var i,r=$(n);if(r.date){var a=Q(r.date,o);i=_(a.restDateString,a.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var s,d=i.getTime(),l=0;if(r.time&&(l=nn(r.time),isNaN(l)))return new Date(NaN);if(!r.timezone){var c=new Date(d+l),A=new Date(0);return A.setFullYear(c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()),A.setHours(c.getUTCHours(),c.getUTCMinutes(),c.getUTCSeconds(),c.getUTCMilliseconds()),A}return s=tn(r.timezone),isNaN(s)?new Date(NaN):new Date(d+l+s)}(n.getCompletionDate())),r=document.createElement("h2");r.innerHTML=i+" left",t.appendChild(r)}}function a(n){e.appendChild(n)}t.addEventListener("click",(()=>{!function(n){let e,t,o,i;function r(r){r.preventDefault();const a=document.getElementById("form"),s=new FormData(a);e=s.get("title"),t=s.get("description"),o=s.get("date"),i=s.get("priority");const d=new class{constructor(n,e,t,o){this.title=n,this.description=e,this.dueDate=t,this.priority=o}get(){return this.title+this.description}getTitle(){return this.title}getDate(){return this.dueDate}getDesc(){return this.description}getPrio(){return this.priority}}(e,t,o,i);document.querySelector(".bg-modal").remove(),function(n,e){e.addTask(n)}(d,n),an(),sn(n)}!function(){const n=document.createElement("div");n.classList.add("bg-modal");const e=document.createElement("div");e.classList.add("modal-content");const t=document.createElement("div");t.innerHTML="+",t.classList.add("close");const o=document.createElement("legend");o.innerHTML="Create Task";const i=document.createElement("form");i.id="form",i.name="form",i.action="POST";const a=document.createElement("input");a.type="text",a.placeholder="Title of task",a.name="title",a.required=!0;const s=document.createElement("textarea");s.rows=4,s.cols=40,s.placeholder="Description of task..",s.name="description";const d=document.createElement("div"),l=document.createElement("label");l.innerHTML="Select a date";const c=document.createElement("input");c.type="date",c.name="date";const A=document.createElement("div"),u=document.createElement("label");u.innerHTML="Choose priority";const p=document.createElement("input");p.type="number",p.name="priority";const m=document.createElement("button");m.type="submit",m.innerHTML="Create task",t.addEventListener("click",(()=>{!function(n){n.remove()}(n)})),m.addEventListener("click",r),document.body.appendChild(n),n.appendChild(e),e.appendChild(t),e.appendChild(i),i.appendChild(o),i.appendChild(a),i.appendChild(s),i.appendChild(d),i.appendChild(A),i.appendChild(m),d.appendChild(l),d.appendChild(c),A.appendChild(u),A.appendChild(p)}()}(n)})),o.addEventListener("input",(function(){const t=e.querySelector("input");n.setCompletionDate(t.value),r()}))},dn=function(n){document.getElementById("todo-container"),an(),sn(n)};!function(){const n=new class{#n=[];constructor(){}get(){return this.#n}set(n){this.#n.push(n)}push(n){this.#n.push(n)}},e=document.querySelector(".left-side-div");e.querySelector("#add-project-button").addEventListener("click",(function(){const t=function(n){const e=document.createElement("div"),t=n.querySelector("ul"),o=n.querySelector("input"),i=o.value,r=document.createElement("li");r.classList.add("project-li"),r.innerHTML=i,r.appendChild(e),t.appendChild(r);const a=new class{#e=[];#t;#o=0;constructor(n){this.#t=n}get(){return this.#e}set(n){this.#e.push(n)}getTitle(){return this.#t}setCompletionDate(n){this.#o=n}getCompletionDate(){return this.#o}addTask(n){this.#e.push(n)}}(i);return o.value="",e.classList.add("close"),e.innerHTML="+",e.id="project-close",{project:a,closeIcon:e}}(e),o=t.project;t.closeIcon.addEventListener("click",(e=>{!function(n,e){const t=document.querySelector(".content"),o=t.querySelector(".left-side-div"),i=n.target.innerText;let r=n.target.parentElement.innerText.replace(i,"");r=r.replace(/[\u0000-\u001F\u007F-\u009F]/g,""),console.log(r+""+e[0].getTitle());for(let n=0;n<e.length;n++)e[n].getTitle()===r&&(an(),e.splice(n,1),a(r),s());function a(n){const e=o.getElementsByClassName("project-li");for(let t of e){let e=t.innerText.replace(/[\u0000-\u001F\u007F-\u009F]/g,"");e=e.replace("+",""),n===e&&t.remove(),console.log(e)}}function s(){const n=t.querySelector("#todo-container"),e=document.createElement("h1");e.innerHTML="Your project will display here!",e.id="default-header",n.appendChild(e)}}(e,n.get())})),function(n){const e=document.querySelector(".left-side-div").querySelector("ul");for(let o of e.childNodes)o.innerText===n.getTitle()&&o.addEventListener("click",t);function t(e){dn(n)}}(o),n.push(o),dn(o)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
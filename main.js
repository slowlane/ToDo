(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),i=t.n(o),r=t(645),a=t.n(r)()(i());a.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  font-family: Arial, Helvetica, sans-serif;\n}\n\nbutton:hover {\n  box-shadow: 1px 1px 20px 6px rgb(85 208 225);\n}\n\ntextarea {\n  resize: none;\n}\n\ntextarea:hover {\n  outline: none;\n}\n\ntextarea:active {\n  outline: none;\n}\n\ntextarea:focus {\n  outline: none;\n}\n\nbody {\n  width: 100%;\n  height: 100%;\n}\n\nheader {\n  display: flex;\n  width: 100%;\n  height: 10vh;\n  background-color: rgba(0, 0, 0, 0.856);\n  align-items: center;\n  padding: 30px;\n  color: white;\n  box-shadow: 0 4px 15px 4px rgb(90 77 77);\n}\n\nheader h1 {\n  font-size: 3rem;\n  cursor: pointer;\n}\n\n.content {\n  display: flex;\n  min-height: 90vh;\n  height: 100%;\n  width: 100%;\n}\n\n/* LEFT SIDE CONTENT */\n\n.left-side-div {\n  display: flex;\n  flex-direction: column;\n  width: 25%;\n  /* height: 100vh; */\n  background-color: rgba(0, 0, 0, 0.856);\n  padding: 10px;\n}\n\n.left-side-div input {\n  font-size: 2rem;\n  width: 90%;\n  padding: 5px;\n  margin: 2%;\n}\n\n.left-side-div button {\n  padding: 14px 14px;\n  width: 40%;\n  margin: 2%;\n  border-radius: 6px;\n  background-color: rgb(0, 140, 255);\n  border-style: none;\n  color: white;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.left-side-div li {\n  border: 2px solid rgb(62, 193, 233);\n  color: rgb(53, 4, 0);\n  margin: 2%;\n  padding: 5px;\n  font-size: 1.5rem;\n  font-weight: 600;\n  cursor: pointer;\n  color: white;\n  list-style-type: none;\n  position: relative;\n  min-height: 40px;\n}\n\n.left-side-div li:hover {\n  box-shadow: 1px 1px 20px 6px rgb(85 208 225);\n}\n\n.active-li {\n  box-shadow: 1px 1px 20px 6px rgb(240, 151, 68);\n}\n\n/* RIGHT SIDE CONTENT */\n\n#todo-container {\n  /* display: grid; */\n  width: 75%;\n  /* height: 100%; */\n  background-color: rgba(0, 0, 0, 0.795);\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n\n  padding: 50px;\n  color: white;\n}\n\n#default-header {\n  text-align: center;\n  font-size: 5rem;\n}\n\n#project-title-div {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 50px;\n}\n\n#project-title-div h2 {\n  font-size: 3rem;\n}\n\n#project-header {\n  font-size: 4rem;\n}\n\n#choose-time-div {\n  display: flex;\n  gap: 20px;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n#choose-time-div input {\n  font-size: 1.5rem;\n}\n\n#choose-time-div label {\n  font-size: 1.5rem;\n  font-weight: 600;\n}\n\n#todo-button-container {\n  display: flex;\n  gap: 20px;\n  justify-content: flex-end;\n}\n\n.todo-div {\n  display: flex;\n  justify-content: space-between;\n  border: solid 1px white;\n  padding: 10px;\n  font-size: 1.5rem;\n  box-shadow: 2px 5px 10px 0px grey;\n  z-index: 2;\n  cursor: pointer;\n  position: relative;\n  height: 80px;\n}\n\n.todo-div:hover {\n  box-shadow: 1px 1px 20px 6px rgb(85 208 225);\n}\n\n.todo-div p {\n  z-index: 0;\n  height: 30px;\n}\n\n#no-delete {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 30px;\n  pointer-events: none;\n  font-weight: 600;\n  font-size: 2rem;\n  border-bottom: 2px solid #80808087;\n  padding-bottom: 36px;\n  position: relative;\n  top: 20px;\n}\n\n.open-todo {\n  display: flex;\n  min-width: 200px;\n  height: 200px;\n  flex-direction: column;\n  justify-content: flex-start;\n  box-shadow: 1px 1px 20px 6px rgb(240, 151, 68);\n}\n\n#extended-div {\n  display: flex;\n  /* z-index: 1; */\n  justify-content: space-between;\n  height: 100%;\n  /* pointer-events: none; */\n  position: relative;\n  top: 20px;\n}\n\n#extended-div textarea {\n  background-color: rgb(0 0 0 / 0%);\n  border-style: none;\n  color: white;\n  font-size: 1.5rem;\n  width: 100%;\n  height: 90%;\n}\n\n.todo-button {\n  padding: 14px 14px;\n  /* width: 40%; */\n  /* margin: 2%; */\n  border-radius: 6px;\n  background-color: rgb(0, 140, 255);\n  border-style: none;\n  color: white;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n}\n\n/* MODAL */\n\n.bg-modal {\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.7);\n  position: absolute;\n  top: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 10;\n  /* display: none; */\n}\n\n.modal-content {\n  width: 500px;\n  height: 375px;\n  font-size: 2rem;\n  background-color: white;\n  border-radius: 4px;\n  text-align: center;\n  padding: 20px;\n  gap: 20px;\n  position: relative;\n}\n\n.modal-content img {\n  border-radius: 50%;\n}\n\n.modal-content form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  z-index: 3;\n}\n\n.modal-content button {\n  padding: 8px 16px;\n\n  align-self: center;\n  background-color: rgb(65, 147, 255);\n  color: white;\n  border-radius: 24px;\n  font-size: 1.5rem;\n  justify-self: flex-end;\n  cursor: pointer;\n  /* margin-right: 5%; */\n}\n\n.modal-content input {\n  width: 70%;\n  display: block;\n  margin: 5px auto;\n  font-size: 1.4rem;\n}\n\n.modal-content textarea {\n  align-self: center;\n  width: 70%;\n}\n\n.close {\n  position: absolute;\n  top: 0;\n  right: 14px;\n  font-size: 42px;\n  transform: rotate(45deg);\n  cursor: pointer;\n  z-index: 10;\n}\n\n#task-close {\n  /* position: absolute; */\n  top: -10px;\n  right: 3px;\n}\n\n#project-close {\n  top: -5px;\n  right: 5px;\n}\n\n@media only screen and (max-width: 960px) {\n  body {\n    height: 100%;\n  }\n  .content {\n    flex-direction: column;\n  }\n  .left-side-div {\n    width: 100%;\n  }\n  #todo-container {\n    width: 100%;\n    min-height: 74vh;\n  }\n\n  #project-header {\n    font-size: 2.5rem;\n  }\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  font-family: Arial, Helvetica, sans-serif;\n}\n\nbutton:hover {\n  box-shadow: 1px 1px 20px 6px rgb(85 208 225);\n}\n\ntextarea {\n  resize: none;\n}\n\ntextarea:hover {\n  outline: none;\n}\n\ntextarea:active {\n  outline: none;\n}\n\ntextarea:focus {\n  outline: none;\n}\n\nbody {\n  width: 100%;\n  height: 100%;\n}\n\nheader {\n  display: flex;\n  width: 100%;\n  height: 10vh;\n  background-color: rgba(0, 0, 0, 0.856);\n  align-items: center;\n  padding: 30px;\n  color: white;\n  box-shadow: 0 4px 15px 4px rgb(90 77 77);\n}\n\nheader h1 {\n  font-size: 3rem;\n  cursor: pointer;\n}\n\n.content {\n  display: flex;\n  min-height: 90vh;\n  height: 100%;\n  width: 100%;\n}\n\n/* LEFT SIDE CONTENT */\n\n.left-side-div {\n  display: flex;\n  flex-direction: column;\n  width: 25%;\n  /* height: 100vh; */\n  background-color: rgba(0, 0, 0, 0.856);\n  padding: 10px;\n}\n\n.left-side-div input {\n  font-size: 2rem;\n  width: 90%;\n  padding: 5px;\n  margin: 2%;\n}\n\n.left-side-div button {\n  padding: 14px 14px;\n  width: 40%;\n  margin: 2%;\n  border-radius: 6px;\n  background-color: rgb(0, 140, 255);\n  border-style: none;\n  color: white;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.left-side-div li {\n  border: 2px solid rgb(62, 193, 233);\n  color: rgb(53, 4, 0);\n  margin: 2%;\n  padding: 5px;\n  font-size: 1.5rem;\n  font-weight: 600;\n  cursor: pointer;\n  color: white;\n  list-style-type: none;\n  position: relative;\n  min-height: 40px;\n}\n\n.left-side-div li:hover {\n  box-shadow: 1px 1px 20px 6px rgb(85 208 225);\n}\n\n.active-li {\n  box-shadow: 1px 1px 20px 6px rgb(240, 151, 68);\n}\n\n/* RIGHT SIDE CONTENT */\n\n#todo-container {\n  /* display: grid; */\n  width: 75%;\n  /* height: 100%; */\n  background-color: rgba(0, 0, 0, 0.795);\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n\n  padding: 50px;\n  color: white;\n}\n\n#default-header {\n  text-align: center;\n  font-size: 5rem;\n}\n\n#project-title-div {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 50px;\n}\n\n#project-title-div h2 {\n  font-size: 3rem;\n}\n\n#project-header {\n  font-size: 4rem;\n}\n\n#choose-time-div {\n  display: flex;\n  gap: 20px;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n#choose-time-div input {\n  font-size: 1.5rem;\n}\n\n#choose-time-div label {\n  font-size: 1.5rem;\n  font-weight: 600;\n}\n\n#todo-button-container {\n  display: flex;\n  gap: 20px;\n  justify-content: flex-end;\n}\n\n.todo-div {\n  display: flex;\n  justify-content: space-between;\n  border: solid 1px white;\n  padding: 10px;\n  font-size: 1.5rem;\n  box-shadow: 2px 5px 10px 0px grey;\n  z-index: 2;\n  cursor: pointer;\n  position: relative;\n  height: 80px;\n}\n\n.todo-div:hover {\n  box-shadow: 1px 1px 20px 6px rgb(85 208 225);\n}\n\n.todo-div p {\n  z-index: 0;\n  height: 30px;\n}\n\n#no-delete {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 30px;\n  pointer-events: none;\n  font-weight: 600;\n  font-size: 2rem;\n  border-bottom: 2px solid #80808087;\n  padding-bottom: 36px;\n  position: relative;\n  top: 20px;\n}\n\n.open-todo {\n  display: flex;\n  min-width: 200px;\n  height: 200px;\n  flex-direction: column;\n  justify-content: flex-start;\n  box-shadow: 1px 1px 20px 6px rgb(240, 151, 68);\n}\n\n#extended-div {\n  display: flex;\n  /* z-index: 1; */\n  justify-content: space-between;\n  height: 100%;\n  /* pointer-events: none; */\n  position: relative;\n  top: 20px;\n}\n\n#extended-div textarea {\n  background-color: rgb(0 0 0 / 0%);\n  border-style: none;\n  color: white;\n  font-size: 1.5rem;\n  width: 100%;\n  height: 90%;\n}\n\n.todo-button {\n  padding: 14px 14px;\n  /* width: 40%; */\n  /* margin: 2%; */\n  border-radius: 6px;\n  background-color: rgb(0, 140, 255);\n  border-style: none;\n  color: white;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n}\n\n/* MODAL */\n\n.bg-modal {\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.7);\n  position: absolute;\n  top: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 10;\n  /* display: none; */\n}\n\n.modal-content {\n  width: 500px;\n  height: 375px;\n  font-size: 2rem;\n  background-color: white;\n  border-radius: 4px;\n  text-align: center;\n  padding: 20px;\n  gap: 20px;\n  position: relative;\n}\n\n.modal-content img {\n  border-radius: 50%;\n}\n\n.modal-content form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  z-index: 3;\n}\n\n.modal-content button {\n  padding: 8px 16px;\n\n  align-self: center;\n  background-color: rgb(65, 147, 255);\n  color: white;\n  border-radius: 24px;\n  font-size: 1.5rem;\n  justify-self: flex-end;\n  cursor: pointer;\n  /* margin-right: 5%; */\n}\n\n.modal-content input {\n  width: 70%;\n  display: block;\n  margin: 5px auto;\n  font-size: 1.4rem;\n}\n\n.modal-content textarea {\n  align-self: center;\n  width: 70%;\n}\n\n.close {\n  position: absolute;\n  top: 0;\n  right: 14px;\n  font-size: 42px;\n  transform: rotate(45deg);\n  cursor: pointer;\n  z-index: 10;\n}\n\n#task-close {\n  /* position: absolute; */\n  top: -10px;\n  right: 3px;\n}\n\n#project-close {\n  top: -5px;\n  right: 5px;\n}\n\n@media only screen and (max-width: 960px) {\n  body {\n    height: 100%;\n  }\n  .content {\n    flex-direction: column;\n  }\n  .left-side-div {\n    width: 100%;\n  }\n  #todo-container {\n    width: 100%;\n    min-height: 74vh;\n  }\n\n  #project-header {\n    font-size: 2.5rem;\n  }\n}\n"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);o&&a[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},a=[],s=0;s<n.length;s++){var d=n[s],A=o.base?d[0]+o.base:d[0],l=r[A]||0,c="".concat(A," ").concat(l);r[A]=l+1;var u=t(c),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var h=i(p,o);o.byIndex=s,e.splice(s,0,{identifier:c,updater:h,references:1})}a.push(c)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=o(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<r.length;a++){var s=t(r[a]);e[s].references--}for(var d=o(n,i),A=0;A<r.length;A++){var l=t(r[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=d}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={id:o,exports:{}};return n[o](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),o=t(795),i=t.n(o),r=t(569),a=t.n(r),s=t(565),d=t.n(s),A=t(216),l=t.n(A),c=t(589),u=t.n(c),p=t(426),h={};h.styleTagTransform=u(),h.setAttributes=d(),h.insert=a().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=l(),e()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;const m=class{#n=[];#e;#t=0;constructor(n){this.#e=n}get(){return this.#n}set(n){this.#n.push(n)}getTitle(){return this.#e}setCompletionDate(n){this.#t=n}getCompletionDate(){return this.#t}addTask(n){this.#n.push(n)}setToDoList(n){this.#n=n}},f=new class{#o=[];constructor(){}get(){return this.#o}set(n){this.#o.push(n)}push(n){this.#o.push(n)}};function g(){const n=f.get(),e=[];for(let t of n){const n={title:t.getTitle(),dueDate:t.getCompletionDate(),toDoList:t.get()};e.push(n)}localStorage.setItem("projects",JSON.stringify(e))}const C=function(){const n=document.querySelector("#todo-container"),e=document.getElementsByClassName("project-li");for(let n of e)n.classList.remove("active-li");n.innerHTML=""};function E(){const n=document.querySelector("#todo-container"),e=document.createElement("h1");e.innerHTML="Your project will display here!",e.id="default-header",n.appendChild(e)}const v=function(n){const e=document.querySelector(".content").querySelector(".left-side-div"),t=f.get();n.stopPropagation();const o=n.target.innerText;let i=n.target.parentElement.innerText.replace(o,"");i=i.replace(/[\u0000-\u001F\u007F-\u009F]/g,"");for(let n=0;n<t.length;n++)t[n].getTitle()===i&&(console.log("up"),C(),t.splice(n,1),r(i),g(),E());function r(n){const t=e.getElementsByClassName("project-li");for(let e of t){let t=e.innerText.replace(/[\u0000-\u001F\u007F-\u009F]/g,"");t=t.replace("+",""),n===t&&e.remove()}}};function x(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function b(n){x(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function B(n,e){x(2,arguments);var t=b(n),o=b(e),i=t.getTime()-o.getTime();return i<0?-1:i>0?1:i}function y(n,e){x(2,arguments);var t=b(n),o=b(e),i=t.getFullYear()-o.getFullYear(),r=t.getMonth()-o.getMonth();return 12*i+r}function w(n){x(1,arguments);var e=b(n);return e.setHours(23,59,59,999),e}function k(n){x(1,arguments);var e=b(n),t=e.getMonth();return e.setFullYear(e.getFullYear(),t+1,0),e.setHours(23,59,59,999),e}function D(n){x(1,arguments);var e=b(n);return w(e).getTime()===k(e).getTime()}function T(n,e){x(2,arguments);var t,o=b(n),i=b(e),r=B(o,i),a=Math.abs(y(o,i));if(a<1)t=0;else{1===o.getMonth()&&o.getDate()>27&&o.setDate(30),o.setMonth(o.getMonth()-r*a);var s=B(o,i)===-r;D(b(n))&&1===a&&1===B(n,i)&&(s=!1),t=r*(a-Number(s))}return 0===t?0:t}function M(n,e){return x(2,arguments),b(n).getTime()-b(e).getTime()}var S={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(n){return n<0?Math.ceil(n):Math.floor(n)}};function j(n){return n?S[n]:S.trunc}function N(n,e,t){x(2,arguments);var o=M(n,e)/1e3;return j(null==t?void 0:t.roundingMethod)(o)}var z={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function L(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,o=n.formats[t]||n.formats[n.defaultWidth];return o}}const W={date:L({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:L({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:L({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function U(n){return function(e,t){var o,i=t||{};if("formatting"===(i.context?String(i.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,a=i.width?String(i.width):r;o=n.formattingValues[a]||n.formattingValues[r]}else{var s=n.defaultWidth,d=i.width?String(i.width):n.defaultWidth;o=n.values[d]||n.values[s]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const P={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:U({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:U({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:U({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:U({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:U({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function I(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,i=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],r=e.match(i);if(!r)return null;var a,s=r[0],d=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],A=Array.isArray(d)?H(d,(function(n){return n.test(s)})):F(d,(function(n){return n.test(s)}));a=n.valueCallback?n.valueCallback(A):A,a=t.valueCallback?t.valueCallback(a):a;var l=e.slice(s.length);return{value:a,rest:l}}}function F(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function H(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var q,X={ordinalNumber:(q={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(q.matchPattern);if(!t)return null;var o=t[0],i=n.match(q.parsePattern);if(!i)return null;var r=q.valueCallback?q.valueCallback(i[0]):i[0];r=e.valueCallback?e.valueCallback(r):r;var a=n.slice(o.length);return{value:r,rest:a}}),era:I({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:I({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:I({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:I({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:I({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Z={code:"en-US",formatDistance:function(n,e,t){var o,i=z[n];return o="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:W,formatRelative:function(n,e,t,o){return Y[n]},localize:P,match:X,options:{weekStartsOn:0,firstWeekContainsDate:1}};function O(n){return function(n,e){if(null==n)throw new TypeError("assign requires that input parameter not be null or undefined");for(var t in e=e||{})Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n}({},n)}function R(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var V=1440,J=43200;function _(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(2,arguments);var o=t.locale||Z;if(!o.formatDistance)throw new RangeError("locale must contain formatDistance property");var i=B(n,e);if(isNaN(i))throw new RangeError("Invalid time value");var r,a,s=O(t);s.addSuffix=Boolean(t.addSuffix),s.comparison=i,i>0?(r=b(e),a=b(n)):(r=b(n),a=b(e));var d,A=N(a,r),l=(R(a)-R(r))/1e3,c=Math.round((A-l)/60);if(c<2)return t.includeSeconds?A<5?o.formatDistance("lessThanXSeconds",5,s):A<10?o.formatDistance("lessThanXSeconds",10,s):A<20?o.formatDistance("lessThanXSeconds",20,s):A<40?o.formatDistance("halfAMinute",null,s):A<60?o.formatDistance("lessThanXMinutes",1,s):o.formatDistance("xMinutes",1,s):0===c?o.formatDistance("lessThanXMinutes",1,s):o.formatDistance("xMinutes",c,s);if(c<45)return o.formatDistance("xMinutes",c,s);if(c<90)return o.formatDistance("aboutXHours",1,s);if(c<V){var u=Math.round(c/60);return o.formatDistance("aboutXHours",u,s)}if(c<2520)return o.formatDistance("xDays",1,s);if(c<J){var p=Math.round(c/V);return o.formatDistance("xDays",p,s)}if(c<86400)return d=Math.round(c/J),o.formatDistance("aboutXMonths",d,s);if((d=T(a,r))<12){var h=Math.round(c/J);return o.formatDistance("xMonths",h,s)}var m=d%12,f=Math.floor(d/12);return m<3?o.formatDistance("aboutXYears",f,s):m<9?o.formatDistance("overXYears",f,s):o.formatDistance("almostXYears",f+1,s)}Math.pow(10,8);var Q=36e5;function $(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var G={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},K=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,nn=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,en=/^([+-])(\d{2})(?::?(\d{2}))?$/;function tn(n){var e,t={},o=n.split(G.dateTimeDelimiter);if(o.length>2)return t;if(/:/.test(o[0])?e=o[0]:(t.date=o[0],e=o[1],G.timeZoneDelimiter.test(t.date)&&(t.date=n.split(G.timeZoneDelimiter)[0],e=n.substr(t.date.length,n.length))),e){var i=G.timezone.exec(e);i?(t.time=e.replace(i[1],""),t.timezone=i[1]):t.time=e}return t}function on(n,e){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),o=n.match(t);if(!o)return{year:NaN,restDateString:""};var i=o[1]?parseInt(o[1]):null,r=o[2]?parseInt(o[2]):null;return{year:null===r?i:100*r,restDateString:n.slice((o[1]||o[2]).length)}}function rn(n,e){if(null===e)return new Date(NaN);var t=n.match(K);if(!t)return new Date(NaN);var o=!!t[4],i=an(t[1]),r=an(t[2])-1,a=an(t[3]),s=an(t[4]),d=an(t[5])-1;if(o)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,s,d)?function(n,e,t){var o=new Date(0);o.setUTCFullYear(n,0,4);var i=7*(e-1)+t+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+i),o}(e,s,d):new Date(NaN);var A=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(ln[e]||(cn(n)?29:28))}(e,r,a)&&function(n,e){return e>=1&&e<=(cn(n)?366:365)}(e,i)?(A.setUTCFullYear(e,r,Math.max(i,a)),A):new Date(NaN)}function an(n){return n?parseInt(n):1}function sn(n){var e=n.match(nn);if(!e)return NaN;var t=dn(e[1]),o=dn(e[2]),i=dn(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,o,i)?t*Q+6e4*o+1e3*i:NaN}function dn(n){return n&&parseFloat(n.replace(",","."))||0}function An(n){if("Z"===n)return 0;var e=n.match(en);if(!e)return 0;var t="+"===e[1]?-1:1,o=parseInt(e[2]),i=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,i)?t*(o*Q+6e4*i):NaN}var ln=[31,null,31,30,31,30,31,31,30,31,30,31];function cn(n){return n%400==0||n%4==0&&n%100!=0}const un=class{constructor(n,e,t){this.title=n,this.description=e,this.dueDate=t}get(){return this.title+this.description}getTitle(){return this.title}getDate(){return this.dueDate}getDesc(){return this.description}setDesc(n){this.description=n}},pn=function(n){let e,t,o;function i(i){i.preventDefault();const r=document.getElementById("form"),a=new FormData(r);e=a.get("title"),t=a.get("description"),o=a.get("date");const s=new un(e,t,o);document.querySelector(".bg-modal").remove(),function(n,e){e.addTask(n),g()}(s,n),C(),hn(n)}!function(){const n=document.createElement("div");n.classList.add("bg-modal");const e=document.createElement("div");e.classList.add("modal-content");const t=document.createElement("div");t.innerHTML="+",t.classList.add("close");const o=document.createElement("legend");o.innerHTML="Create Task";const r=document.createElement("form");r.id="form",r.name="form",r.action="POST";const a=document.createElement("input");a.type="text",a.placeholder="Title of task",a.name="title",a.required=!0;const s=document.createElement("textarea");s.rows=4,s.cols=40,s.placeholder="Description of task..",s.name="description";const d=document.createElement("div"),A=document.createElement("label");A.innerHTML="Select a date";const l=document.createElement("input");l.type="date",l.name="date";const c=document.createElement("button");c.type="submit",c.innerHTML="Create task",t.addEventListener("click",(()=>{!function(n){n.remove()}(n)})),c.addEventListener("click",i),document.body.appendChild(n),n.appendChild(e),e.appendChild(t),e.appendChild(r),r.appendChild(o),r.appendChild(a),r.appendChild(s),r.appendChild(d),r.appendChild(c),d.appendChild(A),d.appendChild(l)}()},hn=function(n){const e=document.getElementById("todo-container"),t=document.querySelector("header").querySelector("h1");!function(){const e=document.createElement("div");e.id="project-title-div";const t=document.createElement("h1");t.id="project-header",t.innerHTML=n.getTitle(),e.appendChild(t),s(e)}(),function(){const n=document.createElement("div"),e=document.createElement("label");e.innerHTML="Pick a date for your project?";const t=document.createElement("input");t.type="date",n.id="choose-time-div",n.appendChild(e),n.appendChild(t),s(n)}(),function(){const e=n.get();if(e.length>0)for(let n of e)r(n)}(),function(){const n=document.createElement("div"),e=document.createElement("button");e.innerHTML="Add task",n.id="todo-button-container",e.classList.add("todo-button"),n.appendChild(e),s(n)}(),a();const o=e.querySelectorAll(".todo-button")[0],i=e.querySelector("input");function r(e){const t=document.createElement("div"),o=document.createElement("div"),i=document.createElement("p"),r=document.createElement("p"),a=document.createElement("div");i.innerHTML=e.getTitle(),r.innerHTML=e.getDate(),a.innerHTML="+",o.id="no-delete",a.classList.add("close"),a.id="task-close",o.appendChild(i),o.appendChild(r),t.appendChild(a),t.appendChild(o),t.classList.add("todo-div"),t.addEventListener("click",(n=>{!function(n,e){const t=n.target;if("DIV"===t.nodeName&&t.classList.contains("todo-div")){t.classList.toggle("open-todo");const n=document.createElement("div");if(t.classList.contains("open-todo")){n.id="extended-div";const o=document.createElement("textarea");o.innerHTML=e.getDesc(),o.id="todo-textarea",n.appendChild(o),t.appendChild(n)}else for(let n of t.childNodes)"extended-div"===n.id&&(e.setDesc(document.getElementById("todo-textarea").value),g()),"DIV"===n.nodeName&&"no-delete"!=n.id&&"task-close"!=n.id&&n.remove()}}(n,e)})),a.addEventListener("click",(e=>{!function(n,e){const t=e.get(),o=n.target.parentElement.childNodes[1].childNodes[0].innerHTML;for(let n=0;n<t.length;n++)t[n].getTitle()===o&&t.splice(n,1);C(),g(),hn(e)}(e,n)})),s(t)}function a(){if(0!=n.getCompletionDate()){const t=e.querySelector("#project-title-div"),o=t.querySelector("h2");null!=o&&o.remove();const i=function(n,e){return x(1,arguments),_(n,Date.now(),e)}(function(n,e){x(1,arguments);var t=e||{},o=null==t.additionalDigits?2:$(t.additionalDigits);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof n&&"[object String]"!==Object.prototype.toString.call(n))return new Date(NaN);var i,r=tn(n);if(r.date){var a=on(r.date,o);i=rn(a.restDateString,a.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var s,d=i.getTime(),A=0;if(r.time&&(A=sn(r.time),isNaN(A)))return new Date(NaN);if(!r.timezone){var l=new Date(d+A),c=new Date(0);return c.setFullYear(l.getUTCFullYear(),l.getUTCMonth(),l.getUTCDate()),c.setHours(l.getUTCHours(),l.getUTCMinutes(),l.getUTCSeconds(),l.getUTCMilliseconds()),c}return s=An(r.timezone),isNaN(s)?new Date(NaN):new Date(d+A+s)}(n.getCompletionDate())),r=document.createElement("h2");r.innerHTML=i+" left",t.appendChild(r)}}function s(n){e.appendChild(n)}o.addEventListener("click",(()=>{pn(n)})),i.addEventListener("input",(function(){const t=e.querySelector("input");n.setCompletionDate(t.value),g(),a()})),t.addEventListener("click",(n=>{C(),E()}))},mn=function(n){hn(n)},fn=function(n){const e=document.querySelector(".left-side-div").querySelector("ul");console.log("yo");for(let o of e.childNodes){let e=o.innerText.replace(/[\u0000-\u001F\u007F-\u009F]/g,"");e=e.replace("+",""),e===n.getTitle()&&o.addEventListener("click",t)}function t(e){C(),e.target.classList.add("active-li"),mn(n)}};function gn(n){const e=document.querySelector(".left-side-div"),t=document.createElement("div"),o=e.querySelector("ul"),i=document.createElement("li");i.classList.add("project-li"),i.innerHTML=n.getTitle(),i.appendChild(t),o.appendChild(i),t.classList.add("close"),t.innerHTML="+",t.id="project-close",t.addEventListener("click",(n=>{v(n)})),fn(n)}!function(){null!=localStorage.getItem("projects")&&function(){if(function(n){var e;try{e=window.localStorage;var t="__storage_test__";return e.setItem(t,t),e.removeItem(t),!0}catch(n){return n instanceof DOMException&&(22===n.code||1014===n.code||"QuotaExceededError"===n.name||"NS_ERROR_DOM_QUOTA_REACHED"===n.name)&&e&&0!==e.length}}()){const e=JSON.parse(localStorage.getItem("projects"));for(let t of e){const e=new m(t.title);if(null!=t.dueDate&&e.setCompletionDate(t.dueDate),null!=t.toDoList)for(let o of t.toDoList)e.addTask(new un((n=o).title,n.description,n.dueDate));f.push(e),gn(e)}}var n}();const n=document.querySelector(".left-side-div");n.querySelector("#add-project-button").addEventListener("click",(function(){const e=function(n){const e=document.createElement("div"),t=n.querySelector("ul"),o=n.querySelector("input"),i=o.value;console.log(i);const r=document.createElement("li");r.classList.add("project-li"),r.innerHTML=o.value,r.appendChild(e),t.appendChild(r);const a=new m(i);return o.value="",e.classList.add("close"),e.innerHTML="+",e.id="project-close",e.addEventListener("click",(n=>{v(n)})),a}(n);fn(e),f.push(e),g(),mn(e)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,